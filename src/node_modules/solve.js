"use strict";

var _ = require("lodash");
var parse = require("parse");
var unparse = require("unparse");

module.exports = _.flow(parse, solve, unparse);

function solve(problem) {
  problem.heatMap = getHeatMap(problem);
  var loons = _.times(problem.nloons, function(iloon) {
    return {id: iloon, altitude: 0};
  });
  return _.times(problem.nsteps, function(istep) {
    return _(loons)
      .map(function(loon) {
        if (loon.altitude === 0) return 1;
        if (loon.altitude === 1) return _.random(0, 1);
        if (loon.altitude === problem.nz) return _.random(-1, 0);
        else return _.random(-1, 1);
      })
      .each(function(altitudeChange, iloon) {
        loons[iloon].altitude += altitudeChange;
      });
  });
}


function getHeatMap(problem) {
  var heatMap = [];
  _.times(problem.ny, function(y) {
    heatMap.push([]);
    _.times(problem.nx, function(x) {
      var current = {x: x, y: y};
      heatMap[y][x] = _(problem.targets).filter(function(target) {
        return isCovered(problem, current, target);
      }).size();
    });
  });
  return heatMap;
}

function isCovered(problem, balloon, target) {
  var distX = balloon.x - target.x;
  var colDist = Math.abs(balloon.y - target.y);
  var columnDist = Math.min(colDist, problem.nx - colDist);
  return Math.pow(distX, 2) + Math.pow(columnDist, 2) <= Math.pow(problem.range, 2);
}