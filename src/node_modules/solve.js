"use strict";

var _ = require("lodash");
var parse = require("parse");
var unparse = require("unparse");

module.exports = _.flow(parse, solve, unparse);

var DIFFERENT_PATHS = 53;

function solve(problem) {
  problem.heatMap = getHeatMap(problem);
  var bestOnesOver = [];
  _.times(300, function() {

    var loons = _.times(problem.nloons, function(iloon) {
      return _.assign({id: iloon, altitude: 0}, problem.home);
    });
    _.times(problem.nsteps, function(istep) {
      return _(loons)
        .map(function chooseMove(loon) {
          if (loon.isLost) return;
          var possibleMoves = getPossibleMoves(problem, loon);
          return _(possibleMoves)
            .map(function(move) {
              return {
                x: loon.x,
                y: loon.y,
                move: move,
                wind: getWind(problem, loon.x, loon.y, loon.altitude + move)
              };
            })
            .filter(function(moveAndWind) {
              return _.inRange(loon.y + moveAndWind.wind.y, 0, problem.ny);
            })
            .sample();
        })
        .each(function updateLoonsPositions(moveAndWind, iloon) {
          var loon = loons[iloon];
          if (!moveAndWind && !loon.isLost) { // we just lost a loon
            //console.warn("loon", iloon, "lost at step", istep);
            loon.isLost = true;
            // _.each(getPossibleMoves(problem, loon), function(move) {
            //   console.log("loon", iloon, loon.x, loon.y, loon.altitude, "move", move, "wind", getWind(problem, loon.x, loon.y, loon.altitude + move));
            // });
          }
          if (loon.isLost) return;
          loon.altitude += moveAndWind.move;
          loon.x = (loon.x + moveAndWind.wind.x) % problem.nx;
          if (loon.x < 0) loon.x += problem.nx; // modulo doest take care of negative values
          loon.y += moveAndWind.wind.y;
          if (!loon.moves) {
            loon.moves = [];
          }
          loon.moves.push(moveAndWind.move || 0);
          loon.score = (loon.score || 0) + problem.heatMap[loon.y][loon.x];

        })
        .map("move")
        .map(function(move) {
          return move || 0; // replace undefined generated from lost loons
        })
        .value();
    });
    var bestOnes = _(loons).filter(function(loon){
      return loon.moves.length === problem.nsteps;
    }).sortBy("score").take(DIFFERENT_PATHS).value();
    bestOnesOver.push(bestOnes);
  });
  bestOnesOver = _(bestOnesOver).flatten().sortBy("score").takeRight(53).value()
  var paths = _.times(problem.nloons, function(iloon) {
    return bestOnesOver[iloon % DIFFERENT_PATHS].moves;
    //return delay(bestOnesOver[iloon % DIFFERENT_PATHS].moves, delayEach * iloon);
  });
  var res = transpose(paths);
  return res;

}

function transpose(arr) {
  return Object.keys(arr[0]).map(function (c) {
    return arr.map(function (r) {
      return r[c];
    });
  });
}

function getPossibleMoves(problem, loon) {
  if (loon.altitude === 0) return [1];
  if (loon.altitude === 1) return [0, 1];
  if (loon.altitude === problem.nz) return [-1, 0];
  else return [-1, 0, 1];
}

function getWind(problem, x, y, altitude) {
  if (altitude === 0) return {x: 0, y: 0}; // no wind on the ground
  var wz = problem.winds[altitude - 1];
  if (wz) var wy = wz[y];
  if (wy) var wind = wy[x];
  if (!wind) throw new Error("no wind at " + x + " " + y + " " + altitude);
  return wind;
}

function getHeatMap(problem) {
  var heatMap = [];
  _.times(problem.ny, function(y) {
    heatMap.push([]);
    _.times(problem.nx, function(x) {
      var current = {x: x, y: y};
      heatMap[y][x] = _(problem.targets).filter(function(target) {
        return isCovered(problem, current, target);
      }).size();
    });
  });
  return heatMap;
}

function isCovered(problem, balloon, target) {
  var distX = balloon.x - target.x;
  var colDist = Math.abs(balloon.y - target.y);
  var columnDist = Math.min(colDist, problem.nx - colDist);
  return Math.pow(distX, 2) + Math.pow(columnDist, 2) <= Math.pow(problem.range, 2);
}

