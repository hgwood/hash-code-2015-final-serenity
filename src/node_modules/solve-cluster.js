"use strict";

var _ = require("lodash");
var cluster = require("cluster");
var parse = require("parse");
var heatMap = require("heat-map.js");
var unparse = require("unparse");
var fs = require("fs");
var cpus = require("os").cpus().length; // 4 cores

module.exports = solve;

var DIFFERENT_PATHS = 25;
var NB_FORK = cpus; // or 10;
var NB_LOOP = 1000;
var inputFile = "./input.txt";
var tempFile = "./problem.tmp";

function solve() {
  fs.readFile(tempFile, function(readFileErr, problem) {
    if (!readFileErr && problem) {
      compute(JSON.parse(problem));
    } else {
      fs.readFile(inputFile, function(readFileErr, input) {
        if (readFileErr) throw readFileErr;
        var flow = _.memoize(_.flow(parse, heatMap));
        var newProblem = flow(input.toString());
        fs.writeFile(tempFile, JSON.stringify(newProblem), function(writeFileErr) {
          if (writeFileErr) throw writeFileErr;
        });
        compute(newProblem);
      });
    }
  });
}

function compute(problem) {

  if (cluster.isMaster) {
    var nbworker = 0;
    var bestOnesOver = [];

    _.times(NB_FORK, function() {
      var worker = cluster.fork();
      worker.on("message", function(bestOnesChild) {
        bestOnesOver = _.union(bestOnesOver, bestOnesChild);
      });
    });
    cluster.on("exit", function(worker, code, signal) {
      //console.log("worker " + worker.process.pid + " died >"+bestOnesOver.length);
      nbworker += 1;
      if (nbworker === NB_FORK - 1) {
        var resbestOnesOver = _(bestOnesOver).flatten().sortBy("score").takeRight(DIFFERENT_PATHS).value();
        console.log("Best score v")
        var delayEach = [0, 1, 2];
        var paths = _.times(problem.nloons, function(iloon) {
          //return bestOnesOver[iloon % DIFFERENT_PATHS].moves;
          return delay(problem, resbestOnesOver[iloon % DIFFERENT_PATHS].moves, _.sample(delayEach) * iloon);
        });
        var movesToPrint = transpose(paths);
        finishTheWork(movesToPrint);
      }
    });
  } else {
    //_.cloneDeep(problem);
    var bestOnesForChild = [];
    _.times(NB_LOOP, function() {
      var loons = _.times(problem.nloons, function(iloon) {
        return _.assign({id: iloon, altitude: 0}, problem.home);
      });
      _.times(problem.nsteps, function(istep) {
        return _(loons)
          .map(function chooseMove(loon) {
            if (loon.isLost) return;
            var possibleMoves = getPossibleMoves(problem, loon);
            return _(possibleMoves)
              .map(function(move) {
                return {
                  x: loon.x,
                  y: loon.y,
                  move: move,
                  wind: getWind(problem, loon.x, loon.y, loon.altitude + move)
                };
              })
              .filter(function(moveAndWind) {
                return _.inRange(loon.y + moveAndWind.wind.y, 0, problem.ny);
              })
              .sample();
          })
          .each(function updateLoonsPositions(moveAndWind, iloon) {
            var loon = loons[iloon];
            if (!moveAndWind && !loon.isLost) { // we just lost a loon
              //console.warn("loon", iloon, "lost at step", istep);
              loon.isLost = true;
              // _.each(getPossibleMoves(problem, loon), function(move) {
              //   console.log("loon", iloon, loon.x, loon.y, loon.altitude, "move", move, "wind", getWind(problem, loon.x, loon.y, loon.altitude + move));
              // });
            }
            if (loon.isLost) return;
            loon.altitude += moveAndWind.move;
            loon.x = (loon.x + moveAndWind.wind.x) % problem.nx;
            if (loon.x < 0) loon.x += problem.nx; // modulo doest take care of negative values
            loon.y += moveAndWind.wind.y;
            if (!loon.moves) {
              loon.moves = [];
            }
            loon.moves.push(moveAndWind.move || 0);
            loon.score = (loon.score || 0) + problem.heatMap[loon.y][loon.x];
            /*

             problem.heatMap[loon.y][loon.x] = 0;
             _.each(_.range(Math.ceil(-problem.range/2), Math.floor(+problem.range/2), function(dx) {
             _.each(_.range(Math.ceil(-problem.range/2), Math.floor(+problem.range/2), function(dy) {
             dx = loon.x + dx % problem.nx;
             if (dx < 0) dx += problem.nx;
             problem.heatMap[Math.min(loon.y + dy, problem.ny)][dx] = 0;
             }));
             }));
             */

          })
          .map("move")
          .map(function(move) {
            return move || 0; // replace undefined generated from lost loons
          })
          .value();
      });
      var bestOnes = _(loons).filter(function(loon) {
        return loon.moves.length === problem.nsteps;
      }).sortBy("score").takeRight(DIFFERENT_PATHS).value();
      //sort and get the best for each iteration
      bestOnesForChild.push(bestOnes);
    });
    var bestForThisFork = _(bestOnesForChild).uniq("moves").sortBy("score").takeRight(DIFFERENT_PATHS).value();
    //sort and get the best after the iteration
    process.send(bestForThisFork);
    process.exit(0);
  }
}

function finishTheWork(moves) {
  var output = unparse(moves);
  var outputFile = process.argv[3] || "./output.txt";
  fs.writeFile(outputFile, output, function(writeFileErr) {
    if (writeFileErr) throw writeFileErr;
  });
}


function transpose(arr) {
  return Object.keys(arr[0]).map(function(c) {
    return arr.map(function(r) {
      return r[c];
    });
  });
}

function getPossibleMoves(problem, loon) {
  if (loon.altitude === 0) return [1];
  if (loon.altitude === 1) return [0, 1];
  if (loon.altitude === problem.nz) return [-1, 0];
  else return [-1, 0, 1];
}

function getWind(problem, x, y, altitude) {
  if (altitude === 0) return {x: 0, y: 0}; // no wind on the ground
  var wz = problem.winds[altitude - 1];
  if (wz) var wy = wz[y];
  if (wy) var wind = wy[x];
  if (!wind) throw new Error("no wind at " + x + " " + y + " " + altitude);
  return wind;
}

function delay(problem, moves, time) {
  var values = _.range(0, time, 0).concat(_.slice(moves, 0, moves.length - time));
  if (values.length !== problem.nsteps) {
    values.concat(_.range(0, problem.nsteps - values.length, 0));
  }
  return values;
}
